/* soapC.cpp
   Generated by gSOAP 2.8.22 from LicWebService.h

Copyright(C) 2000-2015, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#if defined(__BORLANDC__)
#pragma option push -w-8060
#pragma option push -w-8004
#endif

#include "soapH.h"

SOAP_SOURCE_STAMP("@(#) soapC.cpp ver 2.8.22 2016-04-07 06:46:24 GMT")


#ifndef WITH_NOGLOBAL

SOAP_FMAC3 int SOAP_FMAC4 soap_getheader(struct soap *soap)
{
	soap->part = SOAP_IN_HEADER;
	soap->header = soap_in_SOAP_ENV__Header(soap, "SOAP-ENV:Header", soap->header, NULL);
	soap->part = SOAP_END_HEADER;
	return soap->header == NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putheader(struct soap *soap)
{
	if (soap->version && soap->header)
	{	soap->part = SOAP_IN_HEADER;
		if (soap_out_SOAP_ENV__Header(soap, "SOAP-ENV:Header", 0, soap->header, NULL))
			return soap->error;
		soap->part = SOAP_END_HEADER;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializeheader(struct soap *soap)
{
	if (soap->version && soap->header)
		soap_serialize_SOAP_ENV__Header(soap, soap->header);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_header(struct soap *soap)
{
	if (soap->header == NULL)
	{	if ((soap->header = soap_new_SOAP_ENV__Header(soap, -1)))
			soap_default_SOAP_ENV__Header(soap, soap->header);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_fault(struct soap *soap)
{
	if (soap->fault == NULL)
	{	soap->fault = soap_new_SOAP_ENV__Fault(soap, -1);
		if (soap->fault == NULL)
			return;
		soap_default_SOAP_ENV__Fault(soap, soap->fault);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Code)
	{	soap->fault->SOAP_ENV__Code = soap_new_SOAP_ENV__Code(soap, -1);
		soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Reason)
	{	soap->fault->SOAP_ENV__Reason = soap_new_SOAP_ENV__Reason(soap, -1);
		soap_default_SOAP_ENV__Reason(soap, soap->fault->SOAP_ENV__Reason);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializefault(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault)
		soap_serialize_SOAP_ENV__Fault(soap, soap->fault);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putfault(struct soap *soap)
{
	if (soap->fault)
		return soap_put_SOAP_ENV__Fault(soap, soap->fault, "SOAP-ENV:Fault", NULL);
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getfault(struct soap *soap)
{
	return (soap->fault = soap_get_SOAP_ENV__Fault(soap, NULL, "SOAP-ENV:Fault", NULL)) == NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2 && soap->fault->SOAP_ENV__Code)
		return (const char**)(void*)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Value;
	return (const char**)(void*)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode == NULL)
		{	soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode = soap_new_SOAP_ENV__Code(soap, -1);
			soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode);
		}
		return (const char**)(void*)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
	}
	return (const char**)(void*)&soap->fault->faultcode;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_check_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Code && soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode)
			return soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
		return NULL;
	}
	return soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultstring(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)(void*)&soap->fault->SOAP_ENV__Reason->SOAP_ENV__Text;
	return (const char**)(void*)&soap->fault->faultstring;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Detail == NULL)
		{	soap->fault->SOAP_ENV__Detail = soap_new_SOAP_ENV__Detail(soap, -1);
			soap_default_SOAP_ENV__Detail(soap, soap->fault->SOAP_ENV__Detail);
		}
		return (const char**)(void*)&soap->fault->SOAP_ENV__Detail->__any;
	}
	if (soap->fault->detail == NULL)
	{	soap->fault->detail = soap_new_SOAP_ENV__Detail(soap, -1);
		soap_default_SOAP_ENV__Detail(soap, soap->fault->detail);
	}
	return (const char**)(void*)&soap->fault->detail->__any;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_check_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2 && soap->fault->SOAP_ENV__Detail)
		return soap->fault->SOAP_ENV__Detail->__any;
	if (soap->fault->detail)
		return soap->fault->detail->__any;
	return NULL;
}

#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap *soap)
{
	int t;
	if (soap->version == 1)
	{	for (;;)
		{	if (!soap_getelement(soap, &t))
				if (soap->error || soap_ignore_element(soap))
					break;
		}
	}
	if (soap->error == SOAP_NO_TAG || soap->error == SOAP_EOF)
		soap->error = SOAP_OK;
	return soap->error;
}
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap *soap, int *type)
{	(void)type;
	if (soap_peek_element(soap))
		return NULL;
#ifndef WITH_NOIDREF
	if (!*soap->id || !(*type = soap_lookup_type(soap, soap->id)))
		*type = soap_lookup_type(soap, soap->href);
	switch (*type)
	{
	case SOAP_TYPE_byte:
		return soap_in_byte(soap, NULL, NULL, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_in_int(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_unsignedByte:
		return soap_in_unsignedByte(soap, NULL, NULL, "xsd:unsignedByte");
	case SOAP_TYPE_unsignedInt:
		return soap_in_unsignedInt(soap, NULL, NULL, "xsd:unsignedInt");
	case SOAP_TYPE_bool:
		return soap_in_bool(soap, NULL, NULL, "xsd:boolean");
	case SOAP_TYPE_ns1__LMSStuctType:
		return soap_in_ns1__LMSStuctType(soap, NULL, NULL, "ns1:LMSStuctType");
	case SOAP_TYPE_xsd__base64Binary:
		return soap_in_xsd__base64Binary(soap, NULL, NULL, "xsd:base64Binary");
	case SOAP_TYPE_PointerTo_ns1__Reset:
		return soap_in_PointerTo_ns1__Reset(soap, NULL, NULL, "ns1:Reset");
	case SOAP_TYPE_PointerTo_ns1__Logout:
		return soap_in_PointerTo_ns1__Logout(soap, NULL, NULL, "ns1:Logout");
	case SOAP_TYPE_PointerTo_ns1__IsValidToken:
		return soap_in_PointerTo_ns1__IsValidToken(soap, NULL, NULL, "ns1:IsValidToken");
	case SOAP_TYPE_PointerTo_ns1__Login:
		return soap_in_PointerTo_ns1__Login(soap, NULL, NULL, "ns1:Login");
	case SOAP_TYPE_PointerTons1__LMSStuctType:
		return soap_in_PointerTons1__LMSStuctType(soap, NULL, NULL, "ns1:LMSStuctType");
	case SOAP_TYPE_PointerToxsd__base64Binary:
		return soap_in_PointerToxsd__base64Binary(soap, NULL, NULL, "xsd:base64Binary");
	case SOAP_TYPE_PointerTounsignedByte:
		return soap_in_PointerTounsignedByte(soap, NULL, NULL, "xsd:unsignedByte");
	case SOAP_TYPE__QName:
	{	char **s;
		s = soap_in__QName(soap, NULL, NULL, "xsd:QName");
		return s ? *s : NULL;
	}
	case SOAP_TYPE_string:
	{	char **s;
		s = soap_in_string(soap, NULL, NULL, "xsd:string");
		return s ? *s : NULL;
	}
	default:
#else
	*type = 0;
#endif
	{	const char *t = soap->type;
		if (!*t)
			t = soap->tag;
		if (!soap_match_tag(soap, t, "ns1:LMSStuctType"))
		{	*type = SOAP_TYPE_ns1__LMSStuctType;
			return soap_in_ns1__LMSStuctType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:base64Binary"))
		{	*type = SOAP_TYPE_xsd__base64Binary;
			return soap_in_xsd__base64Binary(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:byte"))
		{	*type = SOAP_TYPE_byte;
			return soap_in_byte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:int"))
		{	*type = SOAP_TYPE_int;
			return soap_in_int(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:unsignedByte"))
		{	*type = SOAP_TYPE_unsignedByte;
			return soap_in_unsignedByte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:unsignedInt"))
		{	*type = SOAP_TYPE_unsignedInt;
			return soap_in_unsignedInt(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:boolean"))
		{	*type = SOAP_TYPE_bool;
			return soap_in_bool(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:QName"))
		{	char **s;
			*type = SOAP_TYPE__QName;
			s = soap_in__QName(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	char **s;
			*type = SOAP_TYPE_string;
			s = soap_in_string(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		t = soap->tag;
		if (!soap_match_tag(soap, t, "ns1:ResetResponse"))
		{	*type = SOAP_TYPE__ns1__ResetResponse;
			return soap_in__ns1__ResetResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:Reset"))
		{	*type = SOAP_TYPE__ns1__Reset;
			return soap_in__ns1__Reset(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:LogoutResponse"))
		{	*type = SOAP_TYPE__ns1__LogoutResponse;
			return soap_in__ns1__LogoutResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:Logout"))
		{	*type = SOAP_TYPE__ns1__Logout;
			return soap_in__ns1__Logout(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:IsValidTokenResponse"))
		{	*type = SOAP_TYPE__ns1__IsValidTokenResponse;
			return soap_in__ns1__IsValidTokenResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:IsValidToken"))
		{	*type = SOAP_TYPE__ns1__IsValidToken;
			return soap_in__ns1__IsValidToken(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:LoginResponse"))
		{	*type = SOAP_TYPE__ns1__LoginResponse;
			return soap_in__ns1__LoginResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:Login"))
		{	*type = SOAP_TYPE__ns1__Login;
			return soap_in__ns1__Login(soap, NULL, NULL, NULL);
		}
#ifndef WITH_NOIDREF
	}
#endif
	}
	soap->error = SOAP_TAG_MISMATCH;
	return NULL;
}

#ifdef __cplusplus
}
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap *soap)
{
	if (!soap_peek_element(soap))
	{	int t;
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Unexpected element '%s' in input (level = %u, %d)\n", soap->tag, soap->level, soap->body));
		if (soap->mustUnderstand && !soap->other)
			return soap->error = SOAP_MUSTUNDERSTAND;
		if (((soap->mode & SOAP_XML_STRICT) && soap->part != SOAP_IN_HEADER) || !soap_match_tag(soap, soap->tag, "SOAP-ENV:"))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "REJECTING element '%s'\n", soap->tag));
			return soap->error = SOAP_TAG_MISMATCH;
		}
		if (!*soap->id || !soap_getelement(soap, &t))
		{	soap->peeked = 0;
			if (soap->fignore)
				soap->error = soap->fignore(soap, soap->tag);
			else
				soap->error = SOAP_OK;
			DBGLOG(TEST, if (!soap->error) SOAP_MESSAGE(fdebug, "IGNORING element '%s'\n", soap->tag));
			if (!soap->error && soap->body)
			{	soap->level++;
				while (!soap_ignore_element(soap))
					;
				if (soap->error == SOAP_NO_TAG)
					soap->error = soap_element_end_in(soap, NULL);
			}
		}
	}
	return soap->error;
}

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap *soap)
{
	int i;
	struct soap_plist *pp;
	if (soap->version == 1 && soap->encodingStyle && !(soap->mode & (SOAP_XML_TREE | SOAP_XML_GRAPH)))
		for (i = 0; i < SOAP_PTRHASH; i++)
			for (pp = soap->pht[i]; pp; pp = pp->next)
				if (pp->mark1 == 2 || pp->mark2 == 2)
					if (soap_putelement(soap, pp->ptr, SOAP_MULTIREFTAG, pp->id, pp->type))
						return soap->error;
	return SOAP_OK;
}
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap *soap, const void *ptr, const char *tag, int id, int type)
{	(void)tag;
	switch (type)
	{
	case SOAP_TYPE_byte:
		return soap_out_byte(soap, tag, id, (const char *)ptr, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_out_int(soap, tag, id, (const int *)ptr, "xsd:int");
	case SOAP_TYPE_unsignedByte:
		return soap_out_unsignedByte(soap, tag, id, (const unsigned char *)ptr, "xsd:unsignedByte");
	case SOAP_TYPE_unsignedInt:
		return soap_out_unsignedInt(soap, tag, id, (const unsigned int *)ptr, "xsd:unsignedInt");
	case SOAP_TYPE_bool:
		return soap_out_bool(soap, tag, id, (const bool *)ptr, "xsd:boolean");
	case SOAP_TYPE__ns1__ResetResponse:
		return ((_ns1__ResetResponse *)ptr)->soap_out(soap, "ns1:ResetResponse", id, NULL);
	case SOAP_TYPE__ns1__Reset:
		return ((_ns1__Reset *)ptr)->soap_out(soap, "ns1:Reset", id, NULL);
	case SOAP_TYPE__ns1__LogoutResponse:
		return ((_ns1__LogoutResponse *)ptr)->soap_out(soap, "ns1:LogoutResponse", id, NULL);
	case SOAP_TYPE__ns1__Logout:
		return ((_ns1__Logout *)ptr)->soap_out(soap, "ns1:Logout", id, NULL);
	case SOAP_TYPE__ns1__IsValidTokenResponse:
		return ((_ns1__IsValidTokenResponse *)ptr)->soap_out(soap, "ns1:IsValidTokenResponse", id, NULL);
	case SOAP_TYPE__ns1__IsValidToken:
		return ((_ns1__IsValidToken *)ptr)->soap_out(soap, "ns1:IsValidToken", id, NULL);
	case SOAP_TYPE__ns1__LoginResponse:
		return ((_ns1__LoginResponse *)ptr)->soap_out(soap, "ns1:LoginResponse", id, NULL);
	case SOAP_TYPE__ns1__Login:
		return ((_ns1__Login *)ptr)->soap_out(soap, "ns1:Login", id, NULL);
	case SOAP_TYPE_ns1__LMSStuctType:
		return ((ns1__LMSStuctType *)ptr)->soap_out(soap, tag, id, "ns1:LMSStuctType");
	case SOAP_TYPE_xsd__base64Binary:
		return ((xsd__base64Binary *)ptr)->soap_out(soap, tag, id, "xsd:base64Binary");
	case SOAP_TYPE_PointerTo_ns1__Reset:
		return soap_out_PointerTo_ns1__Reset(soap, tag, id, (_ns1__Reset *const*)ptr, "ns1:Reset");
	case SOAP_TYPE_PointerTo_ns1__Logout:
		return soap_out_PointerTo_ns1__Logout(soap, tag, id, (_ns1__Logout *const*)ptr, "ns1:Logout");
	case SOAP_TYPE_PointerTo_ns1__IsValidToken:
		return soap_out_PointerTo_ns1__IsValidToken(soap, tag, id, (_ns1__IsValidToken *const*)ptr, "ns1:IsValidToken");
	case SOAP_TYPE_PointerTo_ns1__Login:
		return soap_out_PointerTo_ns1__Login(soap, tag, id, (_ns1__Login *const*)ptr, "ns1:Login");
	case SOAP_TYPE_PointerTons1__LMSStuctType:
		return soap_out_PointerTons1__LMSStuctType(soap, tag, id, (ns1__LMSStuctType *const*)ptr, "ns1:LMSStuctType");
	case SOAP_TYPE_PointerToxsd__base64Binary:
		return soap_out_PointerToxsd__base64Binary(soap, tag, id, (xsd__base64Binary *const*)ptr, "xsd:base64Binary");
	case SOAP_TYPE_PointerTounsignedByte:
		return soap_out_PointerTounsignedByte(soap, tag, id, (unsigned char *const*)ptr, "xsd:unsignedByte");
	case SOAP_TYPE__QName:
		return soap_out_string(soap, tag, id, (char*const*)(void*)&ptr, "xsd:QName");
	case SOAP_TYPE_string:
		return soap_out_string(soap, tag, id, (char*const*)(void*)&ptr, "xsd:string");
	}
	return SOAP_OK;
}

#ifdef __cplusplus
}
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap *soap, const void *ptr, int type)
{
	(void)soap; (void)ptr; (void)type; /* appease -Wall -Werror */
	switch (type)
	{
	case SOAP_TYPE__ns1__ResetResponse:
		((_ns1__ResetResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__Reset:
		((_ns1__Reset *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__LogoutResponse:
		((_ns1__LogoutResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__Logout:
		((_ns1__Logout *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__IsValidTokenResponse:
		((_ns1__IsValidTokenResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__IsValidToken:
		((_ns1__IsValidToken *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__LoginResponse:
		((_ns1__LoginResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__Login:
		((_ns1__Login *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__LMSStuctType:
		((ns1__LMSStuctType *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__base64Binary:
		((xsd__base64Binary *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE___ns1__Reset_:
		soap_serialize___ns1__Reset_(soap, (const struct __ns1__Reset_ *)ptr);
		break;
	case SOAP_TYPE___ns1__Logout_:
		soap_serialize___ns1__Logout_(soap, (const struct __ns1__Logout_ *)ptr);
		break;
	case SOAP_TYPE___ns1__IsValidToken_:
		soap_serialize___ns1__IsValidToken_(soap, (const struct __ns1__IsValidToken_ *)ptr);
		break;
	case SOAP_TYPE___ns1__Login_:
		soap_serialize___ns1__Login_(soap, (const struct __ns1__Login_ *)ptr);
		break;
	case SOAP_TYPE___ns1__Reset:
		soap_serialize___ns1__Reset(soap, (const struct __ns1__Reset *)ptr);
		break;
	case SOAP_TYPE___ns1__Logout:
		soap_serialize___ns1__Logout(soap, (const struct __ns1__Logout *)ptr);
		break;
	case SOAP_TYPE___ns1__IsValidToken:
		soap_serialize___ns1__IsValidToken(soap, (const struct __ns1__IsValidToken *)ptr);
		break;
	case SOAP_TYPE___ns1__Login:
		soap_serialize___ns1__Login(soap, (const struct __ns1__Login *)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__Reset:
		soap_serialize_PointerTo_ns1__Reset(soap, (_ns1__Reset *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__Logout:
		soap_serialize_PointerTo_ns1__Logout(soap, (_ns1__Logout *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__IsValidToken:
		soap_serialize_PointerTo_ns1__IsValidToken(soap, (_ns1__IsValidToken *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__Login:
		soap_serialize_PointerTo_ns1__Login(soap, (_ns1__Login *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__LMSStuctType:
		soap_serialize_PointerTons1__LMSStuctType(soap, (ns1__LMSStuctType *const*)ptr);
		break;
	case SOAP_TYPE_PointerToxsd__base64Binary:
		soap_serialize_PointerToxsd__base64Binary(soap, (xsd__base64Binary *const*)ptr);
		break;
	case SOAP_TYPE_PointerTounsignedByte:
		soap_serialize_PointerTounsignedByte(soap, (unsigned char *const*)ptr);
		break;
	case SOAP_TYPE__QName:
		soap_serialize_string(soap, (char*const*)(void*)&ptr);
		break;
	case SOAP_TYPE_string:
		soap_serialize_string(soap, (char*const*)(void*)&ptr);
		break;
	}
}

#ifdef __cplusplus
}
#endif
#endif

SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap *soap, int t, const char *type, const char *arrayType, size_t *n)
{	(void)type;
	switch (t)
	{
	case SOAP_TYPE_xsd__base64Binary:
		return (void*)soap_instantiate_xsd__base64Binary(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__LMSStuctType:
		return (void*)soap_instantiate_ns1__LMSStuctType(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__Login:
		return (void*)soap_instantiate__ns1__Login(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__LoginResponse:
		return (void*)soap_instantiate__ns1__LoginResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__IsValidToken:
		return (void*)soap_instantiate__ns1__IsValidToken(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__IsValidTokenResponse:
		return (void*)soap_instantiate__ns1__IsValidTokenResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__Logout:
		return (void*)soap_instantiate__ns1__Logout(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__LogoutResponse:
		return (void*)soap_instantiate__ns1__LogoutResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__Reset:
		return (void*)soap_instantiate__ns1__Reset(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__ResetResponse:
		return (void*)soap_instantiate__ns1__ResetResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__Login:
		return (void*)soap_instantiate___ns1__Login(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__IsValidToken:
		return (void*)soap_instantiate___ns1__IsValidToken(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__Logout:
		return (void*)soap_instantiate___ns1__Logout(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__Reset:
		return (void*)soap_instantiate___ns1__Reset(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__Login_:
		return (void*)soap_instantiate___ns1__Login_(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__IsValidToken_:
		return (void*)soap_instantiate___ns1__IsValidToken_(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__Logout_:
		return (void*)soap_instantiate___ns1__Logout_(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__Reset_:
		return (void*)soap_instantiate___ns1__Reset_(soap, -1, type, arrayType, n);
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		return (void*)soap_instantiate_SOAP_ENV__Header(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		return (void*)soap_instantiate_SOAP_ENV__Code(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		return (void*)soap_instantiate_SOAP_ENV__Detail(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		return (void*)soap_instantiate_SOAP_ENV__Reason(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		return (void*)soap_instantiate_SOAP_ENV__Fault(soap, -1, type, arrayType, n);
#endif
	}
	return NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap_clist *p)
{	switch (p->type)
	{
	case SOAP_TYPE_xsd__base64Binary:
		if (p->size < 0)
			SOAP_DELETE(static_cast<xsd__base64Binary*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<xsd__base64Binary*>(p->ptr));
		break;
	case SOAP_TYPE_ns1__LMSStuctType:
		if (p->size < 0)
			SOAP_DELETE(static_cast<ns1__LMSStuctType*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<ns1__LMSStuctType*>(p->ptr));
		break;
	case SOAP_TYPE__ns1__Login:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_ns1__Login*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_ns1__Login*>(p->ptr));
		break;
	case SOAP_TYPE__ns1__LoginResponse:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_ns1__LoginResponse*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_ns1__LoginResponse*>(p->ptr));
		break;
	case SOAP_TYPE__ns1__IsValidToken:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_ns1__IsValidToken*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_ns1__IsValidToken*>(p->ptr));
		break;
	case SOAP_TYPE__ns1__IsValidTokenResponse:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_ns1__IsValidTokenResponse*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_ns1__IsValidTokenResponse*>(p->ptr));
		break;
	case SOAP_TYPE__ns1__Logout:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_ns1__Logout*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_ns1__Logout*>(p->ptr));
		break;
	case SOAP_TYPE__ns1__LogoutResponse:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_ns1__LogoutResponse*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_ns1__LogoutResponse*>(p->ptr));
		break;
	case SOAP_TYPE__ns1__Reset:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_ns1__Reset*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_ns1__Reset*>(p->ptr));
		break;
	case SOAP_TYPE__ns1__ResetResponse:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_ns1__ResetResponse*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_ns1__ResetResponse*>(p->ptr));
		break;
	case SOAP_TYPE___ns1__Login:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct __ns1__Login*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct __ns1__Login*>(p->ptr));
		break;
	case SOAP_TYPE___ns1__IsValidToken:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct __ns1__IsValidToken*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct __ns1__IsValidToken*>(p->ptr));
		break;
	case SOAP_TYPE___ns1__Logout:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct __ns1__Logout*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct __ns1__Logout*>(p->ptr));
		break;
	case SOAP_TYPE___ns1__Reset:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct __ns1__Reset*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct __ns1__Reset*>(p->ptr));
		break;
	case SOAP_TYPE___ns1__Login_:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct __ns1__Login_*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct __ns1__Login_*>(p->ptr));
		break;
	case SOAP_TYPE___ns1__IsValidToken_:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct __ns1__IsValidToken_*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct __ns1__IsValidToken_*>(p->ptr));
		break;
	case SOAP_TYPE___ns1__Logout_:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct __ns1__Logout_*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct __ns1__Logout_*>(p->ptr));
		break;
	case SOAP_TYPE___ns1__Reset_:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct __ns1__Reset_*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct __ns1__Reset_*>(p->ptr));
		break;
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct SOAP_ENV__Header*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct SOAP_ENV__Header*>(p->ptr));
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct SOAP_ENV__Code*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct SOAP_ENV__Code*>(p->ptr));
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct SOAP_ENV__Detail*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct SOAP_ENV__Detail*>(p->ptr));
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct SOAP_ENV__Reason*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct SOAP_ENV__Reason*>(p->ptr));
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct SOAP_ENV__Fault*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct SOAP_ENV__Fault*>(p->ptr));
		break;
#endif
	default:	return SOAP_ERR;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void* SOAP_FMAC4 soap_class_id_enter(struct soap *soap, const char *id, void *p, int t, size_t n, const char *type, const char *arrayType)
{	return soap_id_enter(soap, id, p, t, n, 0, type, arrayType, soap_instantiate);
}

SOAP_FMAC3 void* SOAP_FMAC4 soap_container_id_forward(struct soap *soap, const char *href, void *p, size_t len, int st, int tt, size_t n, unsigned int k)
{	return soap_id_forward(soap, href, p, len, st, tt, n, k, soap_container_insert);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_container_insert(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
#ifdef WIN32
#pragma warning(push)
#pragma warning(disable:4065)
#endif
{
	(void)soap; (void)st; (void)p; (void)len; (void)q; (void)n; /* appease -Wall -Werror */
	switch (tt)
	{
	default:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Could not insert type = %d in %d\n", st, tt));
	}
#ifdef WIN32
#pragma warning(pop)
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap *soap, char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap *soap, const char *tag, int id, const char *a, const char *type)
{
	return soap_outbyte(soap, tag, id, a, type, SOAP_TYPE_byte);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap *soap, const char *tag, char *a, const char *type)
{	char *p;
	p = soap_inbyte(soap, tag, a, type, SOAP_TYPE_byte);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap *soap, const char *a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_byte);
	if (soap_out_byte(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap *soap, char *p, const char *tag, const char *type)
{
	if ((p = soap_in_byte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap *soap, int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap *soap, const char *tag, int id, const int *a, const char *type)
{
	return soap_outint(soap, tag, id, a, type, SOAP_TYPE_int);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap *soap, const char *tag, int *a, const char *type)
{	int *p;
	p = soap_inint(soap, tag, a, type, SOAP_TYPE_int);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap *soap, const int *a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_int);
	if (soap_out_int(soap, tag?tag:"int", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap *soap, int *p, const char *tag, const char *type)
{
	if ((p = soap_in_int(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_unsignedByte(struct soap *soap, unsigned char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_unsignedByte
	*a = SOAP_DEFAULT_unsignedByte;
#else
	*a = (unsigned char)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedByte(struct soap *soap, const char *tag, int id, const unsigned char *a, const char *type)
{
	return soap_outunsignedByte(soap, tag, id, a, type, SOAP_TYPE_unsignedByte);
}

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_in_unsignedByte(struct soap *soap, const char *tag, unsigned char *a, const char *type)
{	unsigned char *p;
	p = soap_inunsignedByte(soap, tag, a, type, SOAP_TYPE_unsignedByte);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedByte(struct soap *soap, const unsigned char *a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_unsignedByte);
	if (soap_out_unsignedByte(soap, tag?tag:"unsignedByte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_get_unsignedByte(struct soap *soap, unsigned char *p, const char *tag, const char *type)
{
	if ((p = soap_in_unsignedByte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_unsignedInt(struct soap *soap, unsigned int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_unsignedInt
	*a = SOAP_DEFAULT_unsignedInt;
#else
	*a = (unsigned int)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedInt(struct soap *soap, const char *tag, int id, const unsigned int *a, const char *type)
{
	return soap_outunsignedInt(soap, tag, id, a, type, SOAP_TYPE_unsignedInt);
}

SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_in_unsignedInt(struct soap *soap, const char *tag, unsigned int *a, const char *type)
{	unsigned int *p;
	p = soap_inunsignedInt(soap, tag, a, type, SOAP_TYPE_unsignedInt);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedInt(struct soap *soap, const unsigned int *a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_unsignedInt);
	if (soap_out_unsignedInt(soap, tag?tag:"unsignedInt", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_get_unsignedInt(struct soap *soap, unsigned int *p, const char *tag, const char *type)
{
	if ((p = soap_in_unsignedInt(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_bool(struct soap *soap, bool *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_bool
	*a = SOAP_DEFAULT_bool;
#else
	*a = (bool)0;
#endif
}

static const struct soap_code_map soap_codes_bool[] =
{	{ (long)false, "false" },
	{ (long)true, "true" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_bool2s(struct soap *soap, bool n)
{
	(void)soap; /* appease -Wall -Werror */
return soap_code_str(soap_codes_bool, n != 0);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_bool(struct soap *soap, const char *tag, int id, const bool *a, const char *type)
{	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_bool), type) || soap_send(soap, soap_bool2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2bool(struct soap *soap, const char *s, bool *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_bool, s);
	if (map)
		*a = (bool)(map->code != 0);
	else
	{	long n;
		if (soap_s2long(soap, s, &n) || n < 0 || n > 1)
			return soap->error = SOAP_TYPE;
		*a = (bool)(n != 0);
	}
	return SOAP_OK;
}

SOAP_FMAC3 bool * SOAP_FMAC4 soap_in_bool(struct soap *soap, const char *tag, bool *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type) && soap_match_tag(soap, soap->type, ":boolean"))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (bool *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_bool, sizeof(bool), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (soap->body && !*soap->href)
	{	if (soap_s2bool(soap, soap_value(soap), a) || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (bool *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_bool, 0, sizeof(bool), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_bool(struct soap *soap, const bool *a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_bool);
	if (soap_out_bool(soap, tag?tag:"boolean", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 bool * SOAP_FMAC4 soap_get_bool(struct soap *soap, bool *p, const char *tag, const char *type)
{
	if ((p = soap_in_bool(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns1__ResetResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__ResetResponse::ResetResult = NULL;
	/* transient soap skipped */
}

void _ns1__ResetResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons1__LMSStuctType(soap, &this->_ns1__ResetResponse::ResetResult);
	/* transient soap skipped */
#endif
}

int _ns1__ResetResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__ResetResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__ResetResponse(struct soap *soap, const char *tag, int id, const _ns1__ResetResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__ResetResponse), type))
		return soap->error;
	if (a->ResetResult)
		soap_element_result(soap, "ns1:ResetResult");
	if (a->_ns1__ResetResponse::ResetResult)
	{	if (soap_out_PointerTons1__LMSStuctType(soap, "ns1:ResetResult", -1, &a->_ns1__ResetResponse::ResetResult, ""))
			return soap->error;
	}
	else if (soap_element_nil(soap, "ns1:ResetResult"))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__ResetResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__ResetResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__ResetResponse * SOAP_FMAC4 soap_in__ns1__ResetResponse(struct soap *soap, const char *tag, _ns1__ResetResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__ResetResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__ResetResponse, sizeof(_ns1__ResetResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__ResetResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__ResetResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_ResetResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ResetResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__LMSStuctType(soap, "ns1:ResetResult", &(a->_ns1__ResetResponse::ResetResult), "ns1:LMSStuctType"))
				{	soap_flag_ResetResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:ResetResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__ResetResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__ResetResponse, 0, sizeof(_ns1__ResetResponse), 0, soap_copy__ns1__ResetResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_ResetResult1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__ResetResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__ResetResponse);
	if (this->soap_out(soap, tag?tag:"ns1:ResetResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__ResetResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__ResetResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__ResetResponse * SOAP_FMAC4 soap_get__ns1__ResetResponse(struct soap *soap, _ns1__ResetResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__ResetResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__ResetResponse * SOAP_FMAC2 soap_instantiate__ns1__ResetResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__ResetResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__ResetResponse, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(_ns1__ResetResponse);
		if (size)
			*size = sizeof(_ns1__ResetResponse);
		((_ns1__ResetResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(_ns1__ResetResponse, n);
		if (size)
			*size = n * sizeof(_ns1__ResetResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__ResetResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__ResetResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__ResetResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__ResetResponse %p -> %p\n", q, p));
	*(_ns1__ResetResponse*)p = *(_ns1__ResetResponse*)q;
}

void _ns1__Reset::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__Reset::oLMS = NULL;
	/* transient soap skipped */
}

void _ns1__Reset::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons1__LMSStuctType(soap, &this->_ns1__Reset::oLMS);
	/* transient soap skipped */
#endif
}

int _ns1__Reset::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__Reset(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__Reset(struct soap *soap, const char *tag, int id, const _ns1__Reset *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__Reset), type))
		return soap->error;
	if (a->_ns1__Reset::oLMS)
	{	if (soap_out_PointerTons1__LMSStuctType(soap, "ns1:oLMS", -1, &a->_ns1__Reset::oLMS, ""))
			return soap->error;
	}
	else if (soap_element_nil(soap, "ns1:oLMS"))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__Reset::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__Reset(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__Reset * SOAP_FMAC4 soap_in__ns1__Reset(struct soap *soap, const char *tag, _ns1__Reset *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__Reset *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__Reset, sizeof(_ns1__Reset), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__Reset)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__Reset *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_oLMS1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_oLMS1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__LMSStuctType(soap, "ns1:oLMS", &(a->_ns1__Reset::oLMS), "ns1:LMSStuctType"))
				{	soap_flag_oLMS1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__Reset *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__Reset, 0, sizeof(_ns1__Reset), 0, soap_copy__ns1__Reset);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_oLMS1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__Reset::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__Reset);
	if (this->soap_out(soap, tag?tag:"ns1:Reset", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__Reset::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__Reset(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__Reset * SOAP_FMAC4 soap_get__ns1__Reset(struct soap *soap, _ns1__Reset *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__Reset(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__Reset * SOAP_FMAC2 soap_instantiate__ns1__Reset(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__Reset(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__Reset, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(_ns1__Reset);
		if (size)
			*size = sizeof(_ns1__Reset);
		((_ns1__Reset*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(_ns1__Reset, n);
		if (size)
			*size = n * sizeof(_ns1__Reset);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__Reset*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__Reset*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__Reset(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__Reset %p -> %p\n", q, p));
	*(_ns1__Reset*)p = *(_ns1__Reset*)q;
}

void _ns1__LogoutResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__LogoutResponse::LogoutResult = NULL;
	/* transient soap skipped */
}

void _ns1__LogoutResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons1__LMSStuctType(soap, &this->_ns1__LogoutResponse::LogoutResult);
	/* transient soap skipped */
#endif
}

int _ns1__LogoutResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__LogoutResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__LogoutResponse(struct soap *soap, const char *tag, int id, const _ns1__LogoutResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__LogoutResponse), type))
		return soap->error;
	if (a->LogoutResult)
		soap_element_result(soap, "ns1:LogoutResult");
	if (a->_ns1__LogoutResponse::LogoutResult)
	{	if (soap_out_PointerTons1__LMSStuctType(soap, "ns1:LogoutResult", -1, &a->_ns1__LogoutResponse::LogoutResult, ""))
			return soap->error;
	}
	else if (soap_element_nil(soap, "ns1:LogoutResult"))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__LogoutResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__LogoutResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__LogoutResponse * SOAP_FMAC4 soap_in__ns1__LogoutResponse(struct soap *soap, const char *tag, _ns1__LogoutResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__LogoutResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__LogoutResponse, sizeof(_ns1__LogoutResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__LogoutResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__LogoutResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_LogoutResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_LogoutResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__LMSStuctType(soap, "ns1:LogoutResult", &(a->_ns1__LogoutResponse::LogoutResult), "ns1:LMSStuctType"))
				{	soap_flag_LogoutResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:LogoutResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__LogoutResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__LogoutResponse, 0, sizeof(_ns1__LogoutResponse), 0, soap_copy__ns1__LogoutResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_LogoutResult1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__LogoutResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__LogoutResponse);
	if (this->soap_out(soap, tag?tag:"ns1:LogoutResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__LogoutResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__LogoutResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__LogoutResponse * SOAP_FMAC4 soap_get__ns1__LogoutResponse(struct soap *soap, _ns1__LogoutResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__LogoutResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__LogoutResponse * SOAP_FMAC2 soap_instantiate__ns1__LogoutResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__LogoutResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__LogoutResponse, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(_ns1__LogoutResponse);
		if (size)
			*size = sizeof(_ns1__LogoutResponse);
		((_ns1__LogoutResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(_ns1__LogoutResponse, n);
		if (size)
			*size = n * sizeof(_ns1__LogoutResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__LogoutResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__LogoutResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__LogoutResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__LogoutResponse %p -> %p\n", q, p));
	*(_ns1__LogoutResponse*)p = *(_ns1__LogoutResponse*)q;
}

void _ns1__Logout::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__Logout::oLMS = NULL;
	/* transient soap skipped */
}

void _ns1__Logout::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons1__LMSStuctType(soap, &this->_ns1__Logout::oLMS);
	/* transient soap skipped */
#endif
}

int _ns1__Logout::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__Logout(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__Logout(struct soap *soap, const char *tag, int id, const _ns1__Logout *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__Logout), type))
		return soap->error;
	if (a->_ns1__Logout::oLMS)
	{	if (soap_out_PointerTons1__LMSStuctType(soap, "ns1:oLMS", -1, &a->_ns1__Logout::oLMS, ""))
			return soap->error;
	}
	else if (soap_element_nil(soap, "ns1:oLMS"))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__Logout::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__Logout(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__Logout * SOAP_FMAC4 soap_in__ns1__Logout(struct soap *soap, const char *tag, _ns1__Logout *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__Logout *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__Logout, sizeof(_ns1__Logout), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__Logout)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__Logout *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_oLMS1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_oLMS1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__LMSStuctType(soap, "ns1:oLMS", &(a->_ns1__Logout::oLMS), "ns1:LMSStuctType"))
				{	soap_flag_oLMS1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__Logout *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__Logout, 0, sizeof(_ns1__Logout), 0, soap_copy__ns1__Logout);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_oLMS1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__Logout::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__Logout);
	if (this->soap_out(soap, tag?tag:"ns1:Logout", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__Logout::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__Logout(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__Logout * SOAP_FMAC4 soap_get__ns1__Logout(struct soap *soap, _ns1__Logout *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__Logout(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__Logout * SOAP_FMAC2 soap_instantiate__ns1__Logout(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__Logout(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__Logout, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(_ns1__Logout);
		if (size)
			*size = sizeof(_ns1__Logout);
		((_ns1__Logout*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(_ns1__Logout, n);
		if (size)
			*size = n * sizeof(_ns1__Logout);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__Logout*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__Logout*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__Logout(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__Logout %p -> %p\n", q, p));
	*(_ns1__Logout*)p = *(_ns1__Logout*)q;
}

void _ns1__IsValidTokenResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_bool(soap, &this->_ns1__IsValidTokenResponse::IsValidTokenResult);
	/* transient soap skipped */
}

void _ns1__IsValidTokenResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	/* transient soap skipped */
#endif
}

int _ns1__IsValidTokenResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__IsValidTokenResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__IsValidTokenResponse(struct soap *soap, const char *tag, int id, const _ns1__IsValidTokenResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__IsValidTokenResponse), type))
		return soap->error;
	soap_element_result(soap, "ns1:IsValidTokenResult");
	if (soap_out_bool(soap, "ns1:IsValidTokenResult", -1, &(a->_ns1__IsValidTokenResponse::IsValidTokenResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__IsValidTokenResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__IsValidTokenResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__IsValidTokenResponse * SOAP_FMAC4 soap_in__ns1__IsValidTokenResponse(struct soap *soap, const char *tag, _ns1__IsValidTokenResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__IsValidTokenResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__IsValidTokenResponse, sizeof(_ns1__IsValidTokenResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__IsValidTokenResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__IsValidTokenResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_IsValidTokenResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_IsValidTokenResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "ns1:IsValidTokenResult", &(a->_ns1__IsValidTokenResponse::IsValidTokenResult), "xsd:boolean"))
				{	soap_flag_IsValidTokenResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:IsValidTokenResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__IsValidTokenResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__IsValidTokenResponse, 0, sizeof(_ns1__IsValidTokenResponse), 0, soap_copy__ns1__IsValidTokenResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_IsValidTokenResult1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__IsValidTokenResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__IsValidTokenResponse);
	if (this->soap_out(soap, tag?tag:"ns1:IsValidTokenResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__IsValidTokenResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__IsValidTokenResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__IsValidTokenResponse * SOAP_FMAC4 soap_get__ns1__IsValidTokenResponse(struct soap *soap, _ns1__IsValidTokenResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__IsValidTokenResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__IsValidTokenResponse * SOAP_FMAC2 soap_instantiate__ns1__IsValidTokenResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__IsValidTokenResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__IsValidTokenResponse, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(_ns1__IsValidTokenResponse);
		if (size)
			*size = sizeof(_ns1__IsValidTokenResponse);
		((_ns1__IsValidTokenResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(_ns1__IsValidTokenResponse, n);
		if (size)
			*size = n * sizeof(_ns1__IsValidTokenResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__IsValidTokenResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__IsValidTokenResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__IsValidTokenResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__IsValidTokenResponse %p -> %p\n", q, p));
	*(_ns1__IsValidTokenResponse*)p = *(_ns1__IsValidTokenResponse*)q;
}

void _ns1__IsValidToken::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__IsValidToken::oLMS = NULL;
	/* transient soap skipped */
}

void _ns1__IsValidToken::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons1__LMSStuctType(soap, &this->_ns1__IsValidToken::oLMS);
	/* transient soap skipped */
#endif
}

int _ns1__IsValidToken::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__IsValidToken(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__IsValidToken(struct soap *soap, const char *tag, int id, const _ns1__IsValidToken *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__IsValidToken), type))
		return soap->error;
	if (a->_ns1__IsValidToken::oLMS)
	{	if (soap_out_PointerTons1__LMSStuctType(soap, "ns1:oLMS", -1, &a->_ns1__IsValidToken::oLMS, ""))
			return soap->error;
	}
	else if (soap_element_nil(soap, "ns1:oLMS"))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__IsValidToken::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__IsValidToken(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__IsValidToken * SOAP_FMAC4 soap_in__ns1__IsValidToken(struct soap *soap, const char *tag, _ns1__IsValidToken *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__IsValidToken *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__IsValidToken, sizeof(_ns1__IsValidToken), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__IsValidToken)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__IsValidToken *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_oLMS1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_oLMS1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__LMSStuctType(soap, "ns1:oLMS", &(a->_ns1__IsValidToken::oLMS), "ns1:LMSStuctType"))
				{	soap_flag_oLMS1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__IsValidToken *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__IsValidToken, 0, sizeof(_ns1__IsValidToken), 0, soap_copy__ns1__IsValidToken);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_oLMS1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__IsValidToken::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__IsValidToken);
	if (this->soap_out(soap, tag?tag:"ns1:IsValidToken", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__IsValidToken::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__IsValidToken(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__IsValidToken * SOAP_FMAC4 soap_get__ns1__IsValidToken(struct soap *soap, _ns1__IsValidToken *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__IsValidToken(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__IsValidToken * SOAP_FMAC2 soap_instantiate__ns1__IsValidToken(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__IsValidToken(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__IsValidToken, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(_ns1__IsValidToken);
		if (size)
			*size = sizeof(_ns1__IsValidToken);
		((_ns1__IsValidToken*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(_ns1__IsValidToken, n);
		if (size)
			*size = n * sizeof(_ns1__IsValidToken);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__IsValidToken*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__IsValidToken*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__IsValidToken(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__IsValidToken %p -> %p\n", q, p));
	*(_ns1__IsValidToken*)p = *(_ns1__IsValidToken*)q;
}

void _ns1__LoginResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__LoginResponse::LoginResult = NULL;
	/* transient soap skipped */
}

void _ns1__LoginResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons1__LMSStuctType(soap, &this->_ns1__LoginResponse::LoginResult);
	/* transient soap skipped */
#endif
}

int _ns1__LoginResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__LoginResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__LoginResponse(struct soap *soap, const char *tag, int id, const _ns1__LoginResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__LoginResponse), type))
		return soap->error;
	if (a->LoginResult)
		soap_element_result(soap, "ns1:LoginResult");
	if (a->_ns1__LoginResponse::LoginResult)
	{	if (soap_out_PointerTons1__LMSStuctType(soap, "ns1:LoginResult", -1, &a->_ns1__LoginResponse::LoginResult, ""))
			return soap->error;
	}
	else if (soap_element_nil(soap, "ns1:LoginResult"))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__LoginResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__LoginResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__LoginResponse * SOAP_FMAC4 soap_in__ns1__LoginResponse(struct soap *soap, const char *tag, _ns1__LoginResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__LoginResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__LoginResponse, sizeof(_ns1__LoginResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__LoginResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__LoginResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_LoginResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_LoginResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__LMSStuctType(soap, "ns1:LoginResult", &(a->_ns1__LoginResponse::LoginResult), "ns1:LMSStuctType"))
				{	soap_flag_LoginResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:LoginResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__LoginResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__LoginResponse, 0, sizeof(_ns1__LoginResponse), 0, soap_copy__ns1__LoginResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_LoginResult1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__LoginResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__LoginResponse);
	if (this->soap_out(soap, tag?tag:"ns1:LoginResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__LoginResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__LoginResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__LoginResponse * SOAP_FMAC4 soap_get__ns1__LoginResponse(struct soap *soap, _ns1__LoginResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__LoginResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__LoginResponse * SOAP_FMAC2 soap_instantiate__ns1__LoginResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__LoginResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__LoginResponse, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(_ns1__LoginResponse);
		if (size)
			*size = sizeof(_ns1__LoginResponse);
		((_ns1__LoginResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(_ns1__LoginResponse, n);
		if (size)
			*size = n * sizeof(_ns1__LoginResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__LoginResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__LoginResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__LoginResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__LoginResponse %p -> %p\n", q, p));
	*(_ns1__LoginResponse*)p = *(_ns1__LoginResponse*)q;
}

void _ns1__Login::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__Login::oLMS = NULL;
	/* transient soap skipped */
}

void _ns1__Login::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons1__LMSStuctType(soap, &this->_ns1__Login::oLMS);
	/* transient soap skipped */
#endif
}

int _ns1__Login::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__Login(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__Login(struct soap *soap, const char *tag, int id, const _ns1__Login *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__Login), type))
		return soap->error;
	if (a->_ns1__Login::oLMS)
	{	if (soap_out_PointerTons1__LMSStuctType(soap, "ns1:oLMS", -1, &a->_ns1__Login::oLMS, ""))
			return soap->error;
	}
	else if (soap_element_nil(soap, "ns1:oLMS"))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__Login::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__Login(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__Login * SOAP_FMAC4 soap_in__ns1__Login(struct soap *soap, const char *tag, _ns1__Login *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__Login *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__Login, sizeof(_ns1__Login), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__Login)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__Login *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_oLMS1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_oLMS1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__LMSStuctType(soap, "ns1:oLMS", &(a->_ns1__Login::oLMS), "ns1:LMSStuctType"))
				{	soap_flag_oLMS1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__Login *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__Login, 0, sizeof(_ns1__Login), 0, soap_copy__ns1__Login);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_oLMS1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__Login::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__Login);
	if (this->soap_out(soap, tag?tag:"ns1:Login", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__Login::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__Login(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__Login * SOAP_FMAC4 soap_get__ns1__Login(struct soap *soap, _ns1__Login *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__Login(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__Login * SOAP_FMAC2 soap_instantiate__ns1__Login(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__Login(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__Login, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(_ns1__Login);
		if (size)
			*size = sizeof(_ns1__Login);
		((_ns1__Login*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(_ns1__Login, n);
		if (size)
			*size = n * sizeof(_ns1__Login);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__Login*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__Login*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__Login(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__Login %p -> %p\n", q, p));
	*(_ns1__Login*)p = *(_ns1__Login*)q;
}

void ns1__LMSStuctType::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->ns1__LMSStuctType::size);
	this->ns1__LMSStuctType::buf = NULL;
	/* transient soap skipped */
}

void ns1__LMSStuctType::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerToxsd__base64Binary(soap, &this->ns1__LMSStuctType::buf);
	/* transient soap skipped */
#endif
}

int ns1__LMSStuctType::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__LMSStuctType(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__LMSStuctType(struct soap *soap, const char *tag, int id, const ns1__LMSStuctType *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__LMSStuctType), type))
		return soap->error;
	if (soap_out_int(soap, "ns1:size", -1, &(a->ns1__LMSStuctType::size), ""))
		return soap->error;
	if (soap_out_PointerToxsd__base64Binary(soap, "ns1:buf", -1, &(a->ns1__LMSStuctType::buf), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__LMSStuctType::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__LMSStuctType(soap, tag, this, type);
}

SOAP_FMAC3 ns1__LMSStuctType * SOAP_FMAC4 soap_in_ns1__LMSStuctType(struct soap *soap, const char *tag, ns1__LMSStuctType *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__LMSStuctType *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__LMSStuctType, sizeof(ns1__LMSStuctType), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__LMSStuctType)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__LMSStuctType *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_size1 = 1;
	size_t soap_flag_buf1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_size1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ns1:size", &(a->ns1__LMSStuctType::size), "xsd:int"))
				{	soap_flag_size1--;
					continue;
				}
			if (soap_flag_buf1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToxsd__base64Binary(soap, "ns1:buf", &(a->ns1__LMSStuctType::buf), "xsd:base64Binary"))
				{	soap_flag_buf1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__LMSStuctType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__LMSStuctType, 0, sizeof(ns1__LMSStuctType), 0, soap_copy_ns1__LMSStuctType);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_size1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int ns1__LMSStuctType::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_ns1__LMSStuctType);
	if (this->soap_out(soap, tag?tag:"ns1:LMSStuctType", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__LMSStuctType::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__LMSStuctType(soap, this, tag, type);
}

SOAP_FMAC3 ns1__LMSStuctType * SOAP_FMAC4 soap_get_ns1__LMSStuctType(struct soap *soap, ns1__LMSStuctType *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__LMSStuctType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns1__LMSStuctType * SOAP_FMAC2 soap_instantiate_ns1__LMSStuctType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__LMSStuctType(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__LMSStuctType, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(ns1__LMSStuctType);
		if (size)
			*size = sizeof(ns1__LMSStuctType);
		((ns1__LMSStuctType*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(ns1__LMSStuctType, n);
		if (size)
			*size = n * sizeof(ns1__LMSStuctType);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((ns1__LMSStuctType*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns1__LMSStuctType*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__LMSStuctType(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__LMSStuctType %p -> %p\n", q, p));
	*(ns1__LMSStuctType*)p = *(ns1__LMSStuctType*)q;
}

void xsd__base64Binary::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->__size = 0;
	this->__ptr = NULL;
	this->id = NULL;
	this->type = NULL;
	this->options = NULL;
}

void xsd__base64Binary::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (this->__ptr && !soap_array_reference(soap, this, (struct soap_array*)(void*)&this->__ptr, 1, SOAP_TYPE_xsd__base64Binary))
		if (this->id || this->type)
			soap->mode |= SOAP_ENC_DIME;
#endif
}

int xsd__base64Binary::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{	return soap_out_xsd__base64Binary(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__base64Binary(struct soap *soap, const char *tag, int id, const xsd__base64Binary *a, const char *type)
{
#ifndef WITH_LEANER
	id = soap_attachment(soap, tag, id, a, (struct soap_array*)(void*)&a->__ptr, a->id, a->type, a->options, 1, type, SOAP_TYPE_xsd__base64Binary);
#else
	id = soap_element_id(soap, tag, id, a, (struct soap_array*)(void*)&a->__ptr, 1, type, SOAP_TYPE_xsd__base64Binary);
#endif
	if (id < 0)
		return soap->error;
	if (soap_element_begin_out(soap, tag, id, type))
		return soap->error;
	if (soap_putbase64(soap, a->__ptr, a->__size))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *xsd__base64Binary::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__base64Binary(soap, tag, this, type);
}

SOAP_FMAC3 xsd__base64Binary * SOAP_FMAC4 soap_in_xsd__base64Binary(struct soap *soap, const char *tag, xsd__base64Binary *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type) && soap_match_tag(soap, soap->type, ":base64Binary") && soap_match_tag(soap, soap->type, ":base64"))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (xsd__base64Binary *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__base64Binary, sizeof(xsd__base64Binary), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
		a->soap_default(soap);
	if (soap->body && !*soap->href)
	{
		a->__ptr = soap_getbase64(soap, &a->__size, 0);
#ifndef WITH_LEANER
		if (soap_xop_forward(soap, &a->__ptr, &a->__size, &a->id, &a->type, &a->options))
			return NULL;
#endif
		if ((!a->__ptr && soap->error) || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	
#ifndef WITH_LEANER
		if (*soap->href != '#')
		{	if (soap_dime_forward(soap, &a->__ptr, &a->__size, &a->id, &a->type, &a->options))
				return NULL;
		}
		else
#endif
			a = (xsd__base64Binary *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_xsd__base64Binary, 0, sizeof(xsd__base64Binary), 0, soap_copy_xsd__base64Binary);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int xsd__base64Binary::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int id = soap_embed(soap, (void*)this, (struct soap_array*)(void*)&this->__ptr, 1, SOAP_TYPE_xsd__base64Binary);
	if (this->soap_out(soap, tag?tag:"xsd:base64Binary", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__base64Binary::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__base64Binary(soap, this, tag, type);
}

SOAP_FMAC3 xsd__base64Binary * SOAP_FMAC4 soap_get_xsd__base64Binary(struct soap *soap, xsd__base64Binary *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__base64Binary(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 xsd__base64Binary * SOAP_FMAC2 soap_instantiate_xsd__base64Binary(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__base64Binary(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_xsd__base64Binary, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(xsd__base64Binary);
		if (size)
			*size = sizeof(xsd__base64Binary);
		((xsd__base64Binary*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(xsd__base64Binary, n);
		if (size)
			*size = n * sizeof(xsd__base64Binary);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((xsd__base64Binary*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (xsd__base64Binary*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__base64Binary(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying xsd__base64Binary %p -> %p\n", q, p));
	*(xsd__base64Binary*)p = *(xsd__base64Binary*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->faultcode);
	soap_default_string(soap, &a->faultstring);
	soap_default_string(soap, &a->faultactor);
	a->detail = NULL;
	a->SOAP_ENV__Code = NULL;
	a->SOAP_ENV__Reason = NULL;
	soap_default_string(soap, &a->SOAP_ENV__Node);
	soap_default_string(soap, &a->SOAP_ENV__Role);
	a->SOAP_ENV__Detail = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize__QName(soap, &a->faultcode);
	soap_serialize_string(soap, &a->faultstring);
	soap_serialize_string(soap, &a->faultactor);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->detail);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Code);
	soap_serialize_PointerToSOAP_ENV__Reason(soap, &a->SOAP_ENV__Reason);
	soap_serialize_string(soap, &a->SOAP_ENV__Node);
	soap_serialize_string(soap, &a->SOAP_ENV__Role);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->SOAP_ENV__Detail);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Fault *a, const char *type)
{
	const char *soap_tmp_faultcode = soap_QName2s(soap, a->faultcode);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Fault), type))
		return soap->error;
	if (soap_out__QName(soap, "faultcode", -1, (char*const*)(void*)&soap_tmp_faultcode, ""))
		return soap->error;
	if (soap_out_string(soap, "faultstring", -1, &a->faultstring, ""))
		return soap->error;
	if (soap_out_string(soap, "faultactor", -1, &a->faultactor, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "detail", -1, &a->detail, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", -1, &a->SOAP_ENV__Code, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", -1, &a->SOAP_ENV__Reason, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Node", -1, &a->SOAP_ENV__Node, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Role", -1, &a->SOAP_ENV__Role, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", -1, &a->SOAP_ENV__Detail, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap *soap, const char *tag, struct SOAP_ENV__Fault *a, const char *type)
{
	size_t soap_flag_faultcode = 1;
	size_t soap_flag_faultstring = 1;
	size_t soap_flag_faultactor = 1;
	size_t soap_flag_detail = 1;
	size_t soap_flag_SOAP_ENV__Code = 1;
	size_t soap_flag_SOAP_ENV__Reason = 1;
	size_t soap_flag_SOAP_ENV__Node = 1;
	size_t soap_flag_SOAP_ENV__Role = 1;
	size_t soap_flag_SOAP_ENV__Detail = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Fault *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Fault(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_faultcode && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "faultcode", &a->faultcode, ""))
				{	soap_flag_faultcode--;
					continue;
				}
			if (soap_flag_faultstring && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultstring", &a->faultstring, "xsd:string"))
				{	soap_flag_faultstring--;
					continue;
				}
			if (soap_flag_faultactor && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultactor", &a->faultactor, "xsd:string"))
				{	soap_flag_faultactor--;
					continue;
				}
			if (soap_flag_detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "detail", &a->detail, ""))
				{	soap_flag_detail--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Code && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", &a->SOAP_ENV__Code, ""))
				{	soap_flag_SOAP_ENV__Code--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Reason && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", &a->SOAP_ENV__Reason, ""))
				{	soap_flag_SOAP_ENV__Reason--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Node && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Node", &a->SOAP_ENV__Node, "xsd:string"))
				{	soap_flag_SOAP_ENV__Node--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Role && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Role", &a->SOAP_ENV__Role, "xsd:string"))
				{	soap_flag_SOAP_ENV__Role--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", &a->SOAP_ENV__Detail, ""))
				{	soap_flag_SOAP_ENV__Detail--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Fault *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Fault, 0, sizeof(struct SOAP_ENV__Fault), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_SOAP_ENV__Fault);
	if (soap_out_SOAP_ENV__Fault(soap, tag?tag:"SOAP-ENV:Fault", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Fault(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Fault(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Fault, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(struct SOAP_ENV__Fault);
		if (size)
			*size = sizeof(struct SOAP_ENV__Fault);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(struct SOAP_ENV__Fault, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Fault);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Fault*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Fault(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Fault %p -> %p\n", q, p));
	*(struct SOAP_ENV__Fault*)p = *(struct SOAP_ENV__Fault*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_string(soap, &a->SOAP_ENV__Text);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Reason *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Reason), type))
		return soap->error;
	if (soap->lang)
		soap_set_attr(soap, "xml:lang", soap->lang, 1);
	if (soap_out_string(soap, "SOAP-ENV:Text", -1, &a->SOAP_ENV__Text, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Text = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Reason *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Reason(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Text && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Text", &a->SOAP_ENV__Text, "xsd:string"))
				{	soap_flag_SOAP_ENV__Text--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Reason, 0, sizeof(struct SOAP_ENV__Reason), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_SOAP_ENV__Reason);
	if (soap_out_SOAP_ENV__Reason(soap, tag?tag:"SOAP-ENV:Reason", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Reason(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Reason, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(struct SOAP_ENV__Reason);
		if (size)
			*size = sizeof(struct SOAP_ENV__Reason);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(struct SOAP_ENV__Reason, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Reason);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Reason*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Reason(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Reason %p -> %p\n", q, p));
	*(struct SOAP_ENV__Reason*)p = *(struct SOAP_ENV__Reason*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->__any = NULL;
	a->__type = 0;
	a->fault = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_markelement(soap, a->fault, a->__type);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Detail *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Detail), type))
		return soap->error;
	soap_outliteral(soap, "-any", &a->__any, NULL);
	if (soap_putelement(soap, a->fault, "fault", -1, a->__type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail *a, const char *type)
{
	size_t soap_flag___any = 1;
	size_t soap_flag_fault = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Detail *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Detail(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_fault && soap->error == SOAP_TAG_MISMATCH)
				if ((a->fault = soap_getelement(soap, &a->__type)))
				{	soap_flag_fault = 0;
					continue;
				}
			if (soap_flag___any && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-any", &a->__any))
				{	soap_flag___any--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Detail, 0, sizeof(struct SOAP_ENV__Detail), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_SOAP_ENV__Detail);
	if (soap_out_SOAP_ENV__Detail(soap, tag?tag:"SOAP-ENV:Detail", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Detail(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Detail, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(struct SOAP_ENV__Detail);
		if (size)
			*size = sizeof(struct SOAP_ENV__Detail);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(struct SOAP_ENV__Detail, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Detail);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Detail*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Detail(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Detail %p -> %p\n", q, p));
	*(struct SOAP_ENV__Detail*)p = *(struct SOAP_ENV__Detail*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->SOAP_ENV__Value);
	a->SOAP_ENV__Subcode = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize__QName(soap, &a->SOAP_ENV__Value);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Subcode);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Code *a, const char *type)
{
	const char *soap_tmp_SOAP_ENV__Value = soap_QName2s(soap, a->SOAP_ENV__Value);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Code), type))
		return soap->error;
	if (soap_out__QName(soap, "SOAP-ENV:Value", -1, (char*const*)(void*)&soap_tmp_SOAP_ENV__Value, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", -1, &a->SOAP_ENV__Subcode, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Value = 1;
	size_t soap_flag_SOAP_ENV__Subcode = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Code *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Code(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Value && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "SOAP-ENV:Value", &a->SOAP_ENV__Value, ""))
				{	soap_flag_SOAP_ENV__Value--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Subcode && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", &a->SOAP_ENV__Subcode, ""))
				{	soap_flag_SOAP_ENV__Subcode--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Code, 0, sizeof(struct SOAP_ENV__Code), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_SOAP_ENV__Code);
	if (soap_out_SOAP_ENV__Code(soap, tag?tag:"SOAP-ENV:Code", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Code(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Code, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(struct SOAP_ENV__Code);
		if (size)
			*size = sizeof(struct SOAP_ENV__Code);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(struct SOAP_ENV__Code, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Code);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Code*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Code(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Code %p -> %p\n", q, p));
	*(struct SOAP_ENV__Code*)p = *(struct SOAP_ENV__Code*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Header *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Header), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap *soap, const char *tag, struct SOAP_ENV__Header *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Header *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Header(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Header *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Header, 0, sizeof(struct SOAP_ENV__Header), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_SOAP_ENV__Header);
	if (soap_out_SOAP_ENV__Header(soap, tag?tag:"SOAP-ENV:Header", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Header(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Header(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Header, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(struct SOAP_ENV__Header);
		if (size)
			*size = sizeof(struct SOAP_ENV__Header);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(struct SOAP_ENV__Header, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Header);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Header*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Header(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Header %p -> %p\n", q, p));
	*(struct SOAP_ENV__Header*)p = *(struct SOAP_ENV__Header*)q;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__Reset_(struct soap *soap, struct __ns1__Reset_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__Reset = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__Reset_(struct soap *soap, const struct __ns1__Reset_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__Reset(soap, &a->ns1__Reset);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__Reset_(struct soap *soap, const char *tag, int id, const struct __ns1__Reset_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__Reset(soap, "ns1:Reset", -1, &a->ns1__Reset, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__Reset_ * SOAP_FMAC4 soap_in___ns1__Reset_(struct soap *soap, const char *tag, struct __ns1__Reset_ *a, const char *type)
{
	size_t soap_flag_ns1__Reset = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__Reset_ *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__Reset_, sizeof(struct __ns1__Reset_), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__Reset_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__Reset && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__Reset(soap, "ns1:Reset", &a->ns1__Reset, ""))
				{	soap_flag_ns1__Reset--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__Reset_(struct soap *soap, const struct __ns1__Reset_ *a, const char *tag, const char *type)
{
	int id = 0;
	if (soap_out___ns1__Reset_(soap, tag?tag:"-ns1:Reset", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__Reset_ * SOAP_FMAC4 soap_get___ns1__Reset_(struct soap *soap, struct __ns1__Reset_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__Reset_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__Reset_ * SOAP_FMAC2 soap_instantiate___ns1__Reset_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__Reset_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__Reset_, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(struct __ns1__Reset_);
		if (size)
			*size = sizeof(struct __ns1__Reset_);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(struct __ns1__Reset_, n);
		if (size)
			*size = n * sizeof(struct __ns1__Reset_);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__Reset_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__Reset_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__Reset_ %p -> %p\n", q, p));
	*(struct __ns1__Reset_*)p = *(struct __ns1__Reset_*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__Logout_(struct soap *soap, struct __ns1__Logout_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__Logout = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__Logout_(struct soap *soap, const struct __ns1__Logout_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__Logout(soap, &a->ns1__Logout);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__Logout_(struct soap *soap, const char *tag, int id, const struct __ns1__Logout_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__Logout(soap, "ns1:Logout", -1, &a->ns1__Logout, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__Logout_ * SOAP_FMAC4 soap_in___ns1__Logout_(struct soap *soap, const char *tag, struct __ns1__Logout_ *a, const char *type)
{
	size_t soap_flag_ns1__Logout = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__Logout_ *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__Logout_, sizeof(struct __ns1__Logout_), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__Logout_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__Logout && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__Logout(soap, "ns1:Logout", &a->ns1__Logout, ""))
				{	soap_flag_ns1__Logout--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__Logout_(struct soap *soap, const struct __ns1__Logout_ *a, const char *tag, const char *type)
{
	int id = 0;
	if (soap_out___ns1__Logout_(soap, tag?tag:"-ns1:Logout", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__Logout_ * SOAP_FMAC4 soap_get___ns1__Logout_(struct soap *soap, struct __ns1__Logout_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__Logout_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__Logout_ * SOAP_FMAC2 soap_instantiate___ns1__Logout_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__Logout_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__Logout_, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(struct __ns1__Logout_);
		if (size)
			*size = sizeof(struct __ns1__Logout_);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(struct __ns1__Logout_, n);
		if (size)
			*size = n * sizeof(struct __ns1__Logout_);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__Logout_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__Logout_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__Logout_ %p -> %p\n", q, p));
	*(struct __ns1__Logout_*)p = *(struct __ns1__Logout_*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__IsValidToken_(struct soap *soap, struct __ns1__IsValidToken_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__IsValidToken = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__IsValidToken_(struct soap *soap, const struct __ns1__IsValidToken_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__IsValidToken(soap, &a->ns1__IsValidToken);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__IsValidToken_(struct soap *soap, const char *tag, int id, const struct __ns1__IsValidToken_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__IsValidToken(soap, "ns1:IsValidToken", -1, &a->ns1__IsValidToken, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__IsValidToken_ * SOAP_FMAC4 soap_in___ns1__IsValidToken_(struct soap *soap, const char *tag, struct __ns1__IsValidToken_ *a, const char *type)
{
	size_t soap_flag_ns1__IsValidToken = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__IsValidToken_ *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__IsValidToken_, sizeof(struct __ns1__IsValidToken_), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__IsValidToken_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__IsValidToken && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__IsValidToken(soap, "ns1:IsValidToken", &a->ns1__IsValidToken, ""))
				{	soap_flag_ns1__IsValidToken--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__IsValidToken_(struct soap *soap, const struct __ns1__IsValidToken_ *a, const char *tag, const char *type)
{
	int id = 0;
	if (soap_out___ns1__IsValidToken_(soap, tag?tag:"-ns1:IsValidToken", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__IsValidToken_ * SOAP_FMAC4 soap_get___ns1__IsValidToken_(struct soap *soap, struct __ns1__IsValidToken_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__IsValidToken_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__IsValidToken_ * SOAP_FMAC2 soap_instantiate___ns1__IsValidToken_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__IsValidToken_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__IsValidToken_, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(struct __ns1__IsValidToken_);
		if (size)
			*size = sizeof(struct __ns1__IsValidToken_);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(struct __ns1__IsValidToken_, n);
		if (size)
			*size = n * sizeof(struct __ns1__IsValidToken_);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__IsValidToken_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__IsValidToken_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__IsValidToken_ %p -> %p\n", q, p));
	*(struct __ns1__IsValidToken_*)p = *(struct __ns1__IsValidToken_*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__Login_(struct soap *soap, struct __ns1__Login_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__Login = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__Login_(struct soap *soap, const struct __ns1__Login_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__Login(soap, &a->ns1__Login);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__Login_(struct soap *soap, const char *tag, int id, const struct __ns1__Login_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__Login(soap, "ns1:Login", -1, &a->ns1__Login, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__Login_ * SOAP_FMAC4 soap_in___ns1__Login_(struct soap *soap, const char *tag, struct __ns1__Login_ *a, const char *type)
{
	size_t soap_flag_ns1__Login = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__Login_ *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__Login_, sizeof(struct __ns1__Login_), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__Login_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__Login && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__Login(soap, "ns1:Login", &a->ns1__Login, ""))
				{	soap_flag_ns1__Login--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__Login_(struct soap *soap, const struct __ns1__Login_ *a, const char *tag, const char *type)
{
	int id = 0;
	if (soap_out___ns1__Login_(soap, tag?tag:"-ns1:Login", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__Login_ * SOAP_FMAC4 soap_get___ns1__Login_(struct soap *soap, struct __ns1__Login_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__Login_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__Login_ * SOAP_FMAC2 soap_instantiate___ns1__Login_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__Login_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__Login_, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(struct __ns1__Login_);
		if (size)
			*size = sizeof(struct __ns1__Login_);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(struct __ns1__Login_, n);
		if (size)
			*size = n * sizeof(struct __ns1__Login_);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__Login_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__Login_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__Login_ %p -> %p\n", q, p));
	*(struct __ns1__Login_*)p = *(struct __ns1__Login_*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__Reset(struct soap *soap, struct __ns1__Reset *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__Reset = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__Reset(struct soap *soap, const struct __ns1__Reset *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__Reset(soap, &a->ns1__Reset);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__Reset(struct soap *soap, const char *tag, int id, const struct __ns1__Reset *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__Reset(soap, "ns1:Reset", -1, &a->ns1__Reset, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__Reset * SOAP_FMAC4 soap_in___ns1__Reset(struct soap *soap, const char *tag, struct __ns1__Reset *a, const char *type)
{
	size_t soap_flag_ns1__Reset = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__Reset *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__Reset, sizeof(struct __ns1__Reset), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__Reset(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__Reset && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__Reset(soap, "ns1:Reset", &a->ns1__Reset, ""))
				{	soap_flag_ns1__Reset--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__Reset(struct soap *soap, const struct __ns1__Reset *a, const char *tag, const char *type)
{
	int id = 0;
	if (soap_out___ns1__Reset(soap, tag?tag:"-ns1:Reset", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__Reset * SOAP_FMAC4 soap_get___ns1__Reset(struct soap *soap, struct __ns1__Reset *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__Reset(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__Reset * SOAP_FMAC2 soap_instantiate___ns1__Reset(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__Reset(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__Reset, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(struct __ns1__Reset);
		if (size)
			*size = sizeof(struct __ns1__Reset);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(struct __ns1__Reset, n);
		if (size)
			*size = n * sizeof(struct __ns1__Reset);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__Reset*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__Reset(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__Reset %p -> %p\n", q, p));
	*(struct __ns1__Reset*)p = *(struct __ns1__Reset*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__Logout(struct soap *soap, struct __ns1__Logout *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__Logout = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__Logout(struct soap *soap, const struct __ns1__Logout *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__Logout(soap, &a->ns1__Logout);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__Logout(struct soap *soap, const char *tag, int id, const struct __ns1__Logout *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__Logout(soap, "ns1:Logout", -1, &a->ns1__Logout, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__Logout * SOAP_FMAC4 soap_in___ns1__Logout(struct soap *soap, const char *tag, struct __ns1__Logout *a, const char *type)
{
	size_t soap_flag_ns1__Logout = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__Logout *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__Logout, sizeof(struct __ns1__Logout), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__Logout(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__Logout && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__Logout(soap, "ns1:Logout", &a->ns1__Logout, ""))
				{	soap_flag_ns1__Logout--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__Logout(struct soap *soap, const struct __ns1__Logout *a, const char *tag, const char *type)
{
	int id = 0;
	if (soap_out___ns1__Logout(soap, tag?tag:"-ns1:Logout", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__Logout * SOAP_FMAC4 soap_get___ns1__Logout(struct soap *soap, struct __ns1__Logout *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__Logout(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__Logout * SOAP_FMAC2 soap_instantiate___ns1__Logout(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__Logout(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__Logout, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(struct __ns1__Logout);
		if (size)
			*size = sizeof(struct __ns1__Logout);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(struct __ns1__Logout, n);
		if (size)
			*size = n * sizeof(struct __ns1__Logout);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__Logout*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__Logout(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__Logout %p -> %p\n", q, p));
	*(struct __ns1__Logout*)p = *(struct __ns1__Logout*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__IsValidToken(struct soap *soap, struct __ns1__IsValidToken *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__IsValidToken = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__IsValidToken(struct soap *soap, const struct __ns1__IsValidToken *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__IsValidToken(soap, &a->ns1__IsValidToken);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__IsValidToken(struct soap *soap, const char *tag, int id, const struct __ns1__IsValidToken *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__IsValidToken(soap, "ns1:IsValidToken", -1, &a->ns1__IsValidToken, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__IsValidToken * SOAP_FMAC4 soap_in___ns1__IsValidToken(struct soap *soap, const char *tag, struct __ns1__IsValidToken *a, const char *type)
{
	size_t soap_flag_ns1__IsValidToken = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__IsValidToken *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__IsValidToken, sizeof(struct __ns1__IsValidToken), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__IsValidToken(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__IsValidToken && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__IsValidToken(soap, "ns1:IsValidToken", &a->ns1__IsValidToken, ""))
				{	soap_flag_ns1__IsValidToken--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__IsValidToken(struct soap *soap, const struct __ns1__IsValidToken *a, const char *tag, const char *type)
{
	int id = 0;
	if (soap_out___ns1__IsValidToken(soap, tag?tag:"-ns1:IsValidToken", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__IsValidToken * SOAP_FMAC4 soap_get___ns1__IsValidToken(struct soap *soap, struct __ns1__IsValidToken *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__IsValidToken(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__IsValidToken * SOAP_FMAC2 soap_instantiate___ns1__IsValidToken(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__IsValidToken(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__IsValidToken, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(struct __ns1__IsValidToken);
		if (size)
			*size = sizeof(struct __ns1__IsValidToken);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(struct __ns1__IsValidToken, n);
		if (size)
			*size = n * sizeof(struct __ns1__IsValidToken);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__IsValidToken*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__IsValidToken(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__IsValidToken %p -> %p\n", q, p));
	*(struct __ns1__IsValidToken*)p = *(struct __ns1__IsValidToken*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__Login(struct soap *soap, struct __ns1__Login *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__Login = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__Login(struct soap *soap, const struct __ns1__Login *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__Login(soap, &a->ns1__Login);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__Login(struct soap *soap, const char *tag, int id, const struct __ns1__Login *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__Login(soap, "ns1:Login", -1, &a->ns1__Login, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__Login * SOAP_FMAC4 soap_in___ns1__Login(struct soap *soap, const char *tag, struct __ns1__Login *a, const char *type)
{
	size_t soap_flag_ns1__Login = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__Login *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__Login, sizeof(struct __ns1__Login), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__Login(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__Login && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__Login(soap, "ns1:Login", &a->ns1__Login, ""))
				{	soap_flag_ns1__Login--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__Login(struct soap *soap, const struct __ns1__Login *a, const char *tag, const char *type)
{
	int id = 0;
	if (soap_out___ns1__Login(soap, tag?tag:"-ns1:Login", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__Login * SOAP_FMAC4 soap_get___ns1__Login(struct soap *soap, struct __ns1__Login *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__Login(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__Login * SOAP_FMAC2 soap_instantiate___ns1__Login(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__Login(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__Login, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(struct __ns1__Login);
		if (size)
			*size = sizeof(struct __ns1__Login);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(struct __ns1__Login, n);
		if (size)
			*size = n * sizeof(struct __ns1__Login);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__Login*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__Login(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__Login %p -> %p\n", q, p));
	*(struct __ns1__Login*)p = *(struct __ns1__Login*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Reason))
		soap_serialize_SOAP_ENV__Reason(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Reason *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Reason);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Reason(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Reason **)soap_malloc(soap, sizeof(struct SOAP_ENV__Reason *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Reason(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerToSOAP_ENV__Reason);
	if (soap_out_PointerToSOAP_ENV__Reason(soap, tag?tag:"SOAP-ENV:Reason", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Detail))
		soap_serialize_SOAP_ENV__Detail(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Detail *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Detail);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Detail(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Detail **)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Detail(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerToSOAP_ENV__Detail);
	if (soap_out_PointerToSOAP_ENV__Detail(soap, tag?tag:"SOAP-ENV:Detail", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Code))
		soap_serialize_SOAP_ENV__Code(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Code *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Code);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Code(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Code **)soap_malloc(soap, sizeof(struct SOAP_ENV__Code *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Code(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerToSOAP_ENV__Code);
	if (soap_out_PointerToSOAP_ENV__Code(soap, tag?tag:"SOAP-ENV:Code", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__Reset(struct soap *soap, _ns1__Reset *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__Reset))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__Reset(struct soap *soap, const char *tag, int id, _ns1__Reset *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__Reset);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__Reset ** SOAP_FMAC4 soap_in_PointerTo_ns1__Reset(struct soap *soap, const char *tag, _ns1__Reset **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__Reset **)soap_malloc(soap, sizeof(_ns1__Reset *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__Reset *)soap_instantiate__ns1__Reset(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__Reset ** p = (_ns1__Reset **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__Reset, sizeof(_ns1__Reset), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__Reset(struct soap *soap, _ns1__Reset *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTo_ns1__Reset);
	if (soap_out_PointerTo_ns1__Reset(soap, tag?tag:"ns1:Reset", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__Reset ** SOAP_FMAC4 soap_get_PointerTo_ns1__Reset(struct soap *soap, _ns1__Reset **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__Reset(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__Logout(struct soap *soap, _ns1__Logout *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__Logout))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__Logout(struct soap *soap, const char *tag, int id, _ns1__Logout *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__Logout);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__Logout ** SOAP_FMAC4 soap_in_PointerTo_ns1__Logout(struct soap *soap, const char *tag, _ns1__Logout **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__Logout **)soap_malloc(soap, sizeof(_ns1__Logout *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__Logout *)soap_instantiate__ns1__Logout(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__Logout ** p = (_ns1__Logout **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__Logout, sizeof(_ns1__Logout), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__Logout(struct soap *soap, _ns1__Logout *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTo_ns1__Logout);
	if (soap_out_PointerTo_ns1__Logout(soap, tag?tag:"ns1:Logout", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__Logout ** SOAP_FMAC4 soap_get_PointerTo_ns1__Logout(struct soap *soap, _ns1__Logout **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__Logout(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__IsValidToken(struct soap *soap, _ns1__IsValidToken *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__IsValidToken))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__IsValidToken(struct soap *soap, const char *tag, int id, _ns1__IsValidToken *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__IsValidToken);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__IsValidToken ** SOAP_FMAC4 soap_in_PointerTo_ns1__IsValidToken(struct soap *soap, const char *tag, _ns1__IsValidToken **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__IsValidToken **)soap_malloc(soap, sizeof(_ns1__IsValidToken *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__IsValidToken *)soap_instantiate__ns1__IsValidToken(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__IsValidToken ** p = (_ns1__IsValidToken **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__IsValidToken, sizeof(_ns1__IsValidToken), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__IsValidToken(struct soap *soap, _ns1__IsValidToken *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTo_ns1__IsValidToken);
	if (soap_out_PointerTo_ns1__IsValidToken(soap, tag?tag:"ns1:IsValidToken", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__IsValidToken ** SOAP_FMAC4 soap_get_PointerTo_ns1__IsValidToken(struct soap *soap, _ns1__IsValidToken **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__IsValidToken(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__Login(struct soap *soap, _ns1__Login *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__Login))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__Login(struct soap *soap, const char *tag, int id, _ns1__Login *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__Login);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__Login ** SOAP_FMAC4 soap_in_PointerTo_ns1__Login(struct soap *soap, const char *tag, _ns1__Login **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__Login **)soap_malloc(soap, sizeof(_ns1__Login *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__Login *)soap_instantiate__ns1__Login(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__Login ** p = (_ns1__Login **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__Login, sizeof(_ns1__Login), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__Login(struct soap *soap, _ns1__Login *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTo_ns1__Login);
	if (soap_out_PointerTo_ns1__Login(soap, tag?tag:"ns1:Login", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__Login ** SOAP_FMAC4 soap_get_PointerTo_ns1__Login(struct soap *soap, _ns1__Login **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__Login(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__LMSStuctType(struct soap *soap, ns1__LMSStuctType *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__LMSStuctType))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__LMSStuctType(struct soap *soap, const char *tag, int id, ns1__LMSStuctType *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__LMSStuctType);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__LMSStuctType ** SOAP_FMAC4 soap_in_PointerTons1__LMSStuctType(struct soap *soap, const char *tag, ns1__LMSStuctType **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__LMSStuctType **)soap_malloc(soap, sizeof(ns1__LMSStuctType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__LMSStuctType *)soap_instantiate_ns1__LMSStuctType(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__LMSStuctType ** p = (ns1__LMSStuctType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__LMSStuctType, sizeof(ns1__LMSStuctType), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__LMSStuctType(struct soap *soap, ns1__LMSStuctType *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTons1__LMSStuctType);
	if (soap_out_PointerTons1__LMSStuctType(soap, tag?tag:"ns1:LMSStuctType", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__LMSStuctType ** SOAP_FMAC4 soap_get_PointerTons1__LMSStuctType(struct soap *soap, ns1__LMSStuctType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__LMSStuctType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__base64Binary(struct soap *soap, xsd__base64Binary *const*a)
{
#ifndef WITH_NOIDREF
	if (*a)
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__base64Binary(struct soap *soap, const char *tag, int id, xsd__base64Binary *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, (struct soap_array*)(void*)&(*a)->__ptr, 1, type, SOAP_TYPE_xsd__base64Binary);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 xsd__base64Binary ** SOAP_FMAC4 soap_in_PointerToxsd__base64Binary(struct soap *soap, const char *tag, xsd__base64Binary **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (xsd__base64Binary **)soap_malloc(soap, sizeof(xsd__base64Binary *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (xsd__base64Binary *)soap_instantiate_xsd__base64Binary(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	xsd__base64Binary ** p = (xsd__base64Binary **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_xsd__base64Binary, sizeof(xsd__base64Binary), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__base64Binary(struct soap *soap, xsd__base64Binary *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerToxsd__base64Binary);
	if (soap_out_PointerToxsd__base64Binary(soap, tag?tag:"xsd:base64Binary", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 xsd__base64Binary ** SOAP_FMAC4 soap_get_PointerToxsd__base64Binary(struct soap *soap, xsd__base64Binary **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToxsd__base64Binary(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTounsignedByte(struct soap *soap, unsigned char *const*a)
{
#ifndef WITH_NOIDREF
	soap_reference(soap, *a, SOAP_TYPE_unsignedByte);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTounsignedByte(struct soap *soap, const char *tag, int id, unsigned char *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_unsignedByte);
	if (id < 0)
		return soap->error;
	return soap_out_unsignedByte(soap, tag, id, *a, type);
}

SOAP_FMAC3 unsigned char ** SOAP_FMAC4 soap_in_PointerTounsignedByte(struct soap *soap, const char *tag, unsigned char **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (unsigned char **)soap_malloc(soap, sizeof(unsigned char *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_unsignedByte(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (unsigned char **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_unsignedByte, sizeof(unsigned char), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTounsignedByte(struct soap *soap, unsigned char *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTounsignedByte);
	if (soap_out_PointerTounsignedByte(soap, tag?tag:"unsignedByte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 unsigned char ** SOAP_FMAC4 soap_get_PointerTounsignedByte(struct soap *soap, unsigned char **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTounsignedByte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap *soap, char *const*a)
{
#ifndef WITH_NOIDREF
	soap_reference(soap, *a, SOAP_TYPE__QName);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE__QName);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap *soap, const char *tag, char **a, const char *type)
{	char **p;
	p = soap_instring(soap, tag, a, type, SOAP_TYPE__QName, 2, 0, -1, NULL);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE__QName);
	if (soap_out__QName(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in__QName(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap *soap, char *const*a)
{
#ifndef WITH_NOIDREF
	soap_reference(soap, *a, SOAP_TYPE_string);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_string);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap *soap, const char *tag, char **a, const char *type)
{	char **p;
	p = soap_instring(soap, tag, a, type, SOAP_TYPE_string, 1, 0, -1, NULL);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_string);
	if (soap_out_string(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#if defined(__BORLANDC__)
#pragma option pop
#pragma option pop
#endif

/* End of soapC.cpp */
